import{_ as a,c as t,o as r,ae as d}from"./chunks/framework.NcZqgvTs.js";const u=JSON.parse('{"title":"Events","description":"","frontmatter":{},"headers":[],"relativePath":"development/core/events.md","filePath":"development/core/events.md"}'),o={name:"development/core/events.md"};function l(c,e,i,n,h,s){return r(),t("div",null,e[0]||(e[0]=[d('<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to &quot;Events&quot;">​</a></h1><p>The oc-mall plugin emits the following events:</p><h2 id="order" tabindex="-1">Order <a class="header-anchor" href="#order" aria-label="Permalink to &quot;Order&quot;">​</a></h2><h3 id="mall-order-beforecreate" tabindex="-1"><code>mall.order.beforeCreate</code> <a class="header-anchor" href="#mall-order-beforecreate" aria-label="Permalink to &quot;`mall.order.beforeCreate`&quot;">​</a></h3><p>An order is about to be created. This event receives the <code>$cart</code> model that is about to be converted into an <code>Order</code> model.</p><h3 id="mall-order-aftercreate" tabindex="-1"><code>mall.order.afterCreate</code> <a class="header-anchor" href="#mall-order-aftercreate" aria-label="Permalink to &quot;`mall.order.afterCreate`&quot;">​</a></h3><p>An order has been created. This event receives the <code>$order</code> model and <code>$cart</code> model that was used to create the order.</p><h3 id="mall-order-state-changed" tabindex="-1"><code>mall.order.state.changed</code> <a class="header-anchor" href="#mall-order-state-changed" aria-label="Permalink to &quot;`mall.order.state.changed`&quot;">​</a></h3><p>An order&#39;s <code>OrderState</code> has changed. This event receives the modified <code>$order</code> as a single argument.</p><h3 id="mall-order-tracking-changed" tabindex="-1"><code>mall.order.tracking.changed</code> <a class="header-anchor" href="#mall-order-tracking-changed" aria-label="Permalink to &quot;`mall.order.tracking.changed`&quot;">​</a></h3><p>An order&#39;s tracking information has changed. This event receives the modified <code>$order</code> as a single argument.</p><h3 id="mall-order-payment-state-changed" tabindex="-1"><code>mall.order.payment_state.changed</code> <a class="header-anchor" href="#mall-order-payment-state-changed" aria-label="Permalink to &quot;`mall.order.payment_state.changed`&quot;">​</a></h3><p>An order&#39;s payment state has changed. This event receives the modified <code>$order</code> as a single argument.</p><h3 id="mall-order-shipped" tabindex="-1"><code>mall.order.shipped</code> <a class="header-anchor" href="#mall-order-shipped" aria-label="Permalink to &quot;`mall.order.shipped`&quot;">​</a></h3><p>An order has been marked as shipped. This event receives the shipped <code>$order</code> as a single argument.</p><h2 id="customer" tabindex="-1">Customer <a class="header-anchor" href="#customer" aria-label="Permalink to &quot;Customer&quot;">​</a></h2><h3 id="mall-customer-beforesignup" tabindex="-1"><code>mall.customer.beforeSignup</code> <a class="header-anchor" href="#mall-customer-beforesignup" aria-label="Permalink to &quot;`mall.customer.beforeSignup`&quot;">​</a></h3><p>This event is emitted before a new customer account is created. This event receives the <code>SignupHandler</code> implementation and all sign up form data as arguments.</p><h3 id="mall-customer-aftersignup" tabindex="-1"><code>mall.customer.afterSignup</code> <a class="header-anchor" href="#mall-customer-aftersignup" aria-label="Permalink to &quot;`mall.customer.afterSignup`&quot;">​</a></h3><p>This event is emitted after a new customer account was created. This event receives the <code>SignupHandler</code> implementation and the created <code>User</code> model as arguments.</p><h3 id="mall-customer-beforeauthenticate" tabindex="-1"><code>mall.customer.beforeAuthenticate</code> <a class="header-anchor" href="#mall-customer-beforeauthenticate" aria-label="Permalink to &quot;`mall.customer.beforeAuthenticate`&quot;">​</a></h3><p>This event is emitted when a existing customer tries to sign in. This event receives the <code>SignupHandler</code> implementation and the provided credentials as arguments.</p><h2 id="cart" tabindex="-1">Cart <a class="header-anchor" href="#cart" aria-label="Permalink to &quot;Cart&quot;">​</a></h2><h3 id="mall-cart-product-added" tabindex="-1"><code>mall.cart.product.added</code> <a class="header-anchor" href="#mall-cart-product-added" aria-label="Permalink to &quot;`mall.cart.product.added`&quot;">​</a></h3><p>This event is emitted when a product has been added to the cart. It receives the following arguments:</p><ul><li><code>CartProduct</code> model that was updated in the cart</li></ul><h3 id="mall-cart-product-removed" tabindex="-1"><code>mall.cart.product.removed</code> <a class="header-anchor" href="#mall-cart-product-removed" aria-label="Permalink to &quot;`mall.cart.product.removed`&quot;">​</a></h3><p>This event is emitted when a product has been removed from the cart. It receives the following arguments:</p><ul><li><code>CartProduct</code> model that was removed from the cart</li></ul><h3 id="mall-cart-product-updating" tabindex="-1"><code>mall.cart.product.updating</code> <a class="header-anchor" href="#mall-cart-product-updating" aria-label="Permalink to &quot;`mall.cart.product.updating`&quot;">​</a></h3><p>This event is emitted before a cart product is being updated. It receives the following arguments:</p><ul><li><code>CartProduct</code> model that was updated in the cart</li></ul><h3 id="mall-cart-product-updated" tabindex="-1"><code>mall.cart.product.updated</code> <a class="header-anchor" href="#mall-cart-product-updated" aria-label="Permalink to &quot;`mall.cart.product.updated`&quot;">​</a></h3><p>This event is emitted when a cart product was updated. It receives the following arguments:</p><ul><li><code>CartProduct</code> model that was updated in the cart</li></ul><h3 id="mall-cart-product-quantitychanged" tabindex="-1"><code>mall.cart.product.quantityChanged</code> <a class="header-anchor" href="#mall-cart-product-quantitychanged" aria-label="Permalink to &quot;`mall.cart.product.quantityChanged`&quot;">​</a></h3><p>This event is emitted when the quantity of a cart product has changed. It receives the following arguments:</p><ul><li><code>CartProduct</code> model that was updated in the cart</li><li><code>oldQuantity</code> the old quantity value</li><li><code>newQuantity</code> the new quantity value</li></ul><h3 id="mall-cart-extendavailablepaymentmethods" tabindex="-1"><code>mall.cart.extendAvailablePaymentMethods</code> <a class="header-anchor" href="#mall-cart-extendavailablepaymentmethods" aria-label="Permalink to &quot;`mall.cart.extendAvailablePaymentMethods`&quot;">​</a></h3><p>This event allows to customize the payment methods based on the current cart.</p><h2 id="checkout" tabindex="-1">Checkout <a class="header-anchor" href="#checkout" aria-label="Permalink to &quot;Checkout&quot;">​</a></h2><h3 id="mall-checkout-succeeded" tabindex="-1"><code>mall.checkout.succeeded</code> <a class="header-anchor" href="#mall-checkout-succeeded" aria-label="Permalink to &quot;`mall.checkout.succeeded`&quot;">​</a></h3><p>This event is emitted when a checkout has been completed successfully. It receives a <code>PaymentResult</code> as a single argument.</p><h3 id="mall-checkout-failed" tabindex="-1"><code>mall.checkout.failed</code> <a class="header-anchor" href="#mall-checkout-failed" aria-label="Permalink to &quot;`mall.checkout.failed`&quot;">​</a></h3><p>This event is emitted when there was a problem during the checkout process. It receives a <code>PaymentResult</code> as a single argument.</p><h2 id="shipping" tabindex="-1">Shipping <a class="header-anchor" href="#shipping" aria-label="Permalink to &quot;Shipping&quot;">​</a></h2><h3 id="mall-shipping-methods-availability" tabindex="-1"><code>mall.shipping.methods.availability</code> <a class="header-anchor" href="#mall-shipping-methods-availability" aria-label="Permalink to &quot;`mall.shipping.methods.availability`&quot;">​</a></h3><p>This event is emitted immediately after the shipping methods have been filtered according to their availability by country and the total amount of the cart. It receives the following arguments:</p><ul><li><code>ShippingMethod</code> collection of all available shipping methods</li><li><code>Cart</code> the current cart</li><li><code>Whishlist</code> the current whishlist</li></ul><h2 id="review" tabindex="-1">Review <a class="header-anchor" href="#review" aria-label="Permalink to &quot;Review&quot;">​</a></h2><h3 id="mall-review-created" tabindex="-1"><code>mall.review.created</code> <a class="header-anchor" href="#mall-review-created" aria-label="Permalink to &quot;`mall.review.created`&quot;">​</a></h3><p>This event is emitted when a review was created. It receives the created <code>Review</code> model as a single argument.</p><h3 id="mall-review-updated" tabindex="-1"><code>mall.review.updated</code> <a class="header-anchor" href="#mall-review-updated" aria-label="Permalink to &quot;`mall.review.updated`&quot;">​</a></h3><p>This event is emitted when a review was updated. It receives the updated <code>Review</code> model as a single argument.</p><h2 id="product" tabindex="-1">Product <a class="header-anchor" href="#product" aria-label="Permalink to &quot;Product&quot;">​</a></h2><h3 id="mall-product-file-grant-created" tabindex="-1"><code>mall.product.file_grant.created</code> <a class="header-anchor" href="#mall-product-file-grant-created" aria-label="Permalink to &quot;`mall.product.file_grant.created`&quot;">​</a></h3><p>This event is emitted when a product file grant was created. It receives the created <code>ProductFileGrant</code> model as well as the related <code>Product</code> model.</p><p>For a usage example see</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="mall-index-extendproduct-and-mall-index-extendvariant" tabindex="-1"><code>mall.index.extendProduct</code> and <code>mall.index.extendVariant</code> <a class="header-anchor" href="#mall-index-extendproduct-and-mall-index-extendvariant" aria-label="Permalink to &quot;`mall.index.extendProduct` and `mall.index.extendVariant`&quot;">​</a></h3><p>This event can be used to add additional data to the index table.</p><p>It receives the <code>Product</code> model (for Products) or the <code>Product</code> and <code>Variant</code> models (for Variants). You can return an array of additional data to be stored with the index entry.</p>',62)]))}const p=a(o,[["render",l]]);export{u as __pageData,p as default};
